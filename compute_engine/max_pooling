// File: max_pooling.sv
`timescale 1ns/1ps

module max_pooling #(
    parameter DATA_WIDTH = 8,          // Width of data (input_pixel and pooled_pixel)
    parameter POOL_SIZE = 2            // Pooling window size (e.g., 2 for 2x2 pooling)
)(
    input  logic clk,                                  // Clock signal
    input  logic reset,                                // Reset signal
    input  logic start,                                // Start pooling operation
    input  logic [DATA_WIDTH-1:0] input_pixel,         // Input pixel
    input  logic input_valid,                          // Input pixel valid signal
    output logic [DATA_WIDTH-1:0] pooled_pixel,        // Pooled output pixel
    output logic pooled_valid,                         // Pooled output valid signal
    output logic done                                  // Pooling operation done signal
);

    // State Machine States
    typedef enum logic [2:0] {  // Increased bit width to 3 bits
        IDLE,
        LOAD,
        POOL,
        OUTPUT,
        DONE_STATE
    } state_t;

    state_t current_state, next_state;

    // Calculate the number of pixels in the pooling window
    localparam integer WINDOW_SIZE = POOL_SIZE * POOL_SIZE;

    // Registers to hold input window
    logic [DATA_WIDTH-1:0] window [0:WINDOW_SIZE-1];
    integer idx;
    integer input_count;

    // Register to hold the maximum value
    logic [DATA_WIDTH-1:0] max_val;

    // **Temporary variable for max calculation**
    logic [DATA_WIDTH-1:0] temp_max;

    // State Transition
    always_ff @(posedge clk or posedge reset) begin
        if (reset) begin
            current_state <= IDLE;
            idx <= 0;
            input_count <= 0;
        end else begin
            current_state <= next_state;
        end
    end

    // Next State Logic
    always_comb begin
        next_state = current_state;
        case (current_state)
            IDLE: begin
                if (start)
                    next_state = LOAD;
            end
            LOAD: begin
                if (input_count == WINDOW_SIZE)
                    next_state = POOL;
            end
            POOL: begin
                next_state = OUTPUT;
            end
            OUTPUT: begin
                next_state = DONE_STATE;
            end
            DONE_STATE: begin
                next_state = IDLE;
            end
        endcase
    end

    // Sequential Logic for Loading Window
    always_ff @(posedge clk or posedge reset) begin
        if (reset) begin
            idx <= 0;
            input_count <= 0;
            for (integer i = 0; i < WINDOW_SIZE; i = i + 1)
                window[i] <= {DATA_WIDTH{1'b0}};
        end else begin
            if (current_state == LOAD && input_valid) begin
                window[idx] <= input_pixel;
                idx <= idx + 1;
                input_count <= input_count + 1;
            end
        end
    end

    // **Max Pooling Operation using temp_max**
    always_ff @(posedge clk or posedge reset) begin
        if (reset) begin
            max_val <= {DATA_WIDTH{1'b0}};
        end else begin
            if (current_state == POOL) begin
                integer i;
                temp_max = window[0];
                for (i = 1; i < WINDOW_SIZE; i = i + 1) begin
                    if (window[i] > temp_max)
                        temp_max = window[i];
                end
                max_val <= temp_max;
            end
        end
    end

    // Output Logic
    always_ff @(posedge clk or posedge reset) begin
        if (reset) begin
            pooled_pixel <= {DATA_WIDTH{1'b0}};
            pooled_valid <= 1'b0;
            done         <= 1'b0;
        end else begin
            case (current_state)
                IDLE, LOAD, POOL: begin
                    pooled_valid <= 1'b0;
                    done         <= 1'b0;
                end
                OUTPUT: begin
                    pooled_pixel <= max_val;
                    pooled_valid <= 1'b1;
                    done         <= 1'b1;
                end
                DONE_STATE: begin
                    pooled_valid <= 1'b0;
                    done         <= 1'b0;
                    idx <= 0;
                    input_count <= 0;
                end
            endcase
        end
    end

endmodule
