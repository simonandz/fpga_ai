// File: fully_connected_layer.sv
`timescale 1ns/1ps

module fully_connected_layer #(
    parameter INPUT_SIZE = 12,
    parameter OUTPUT_SIZE = 4
) (
    input  logic clk,
    input  logic reset,
    input  logic start,
    input  logic [INPUT_SIZE*8-1:0] input_vector_packed,
    input  logic signed [INPUT_SIZE*OUTPUT_SIZE*8-1:0] weights_packed,
    input  logic signed [OUTPUT_SIZE*8-1:0] biases_packed,
    output logic signed [OUTPUT_SIZE*16-1:0] fc_output_packed,
    output logic done
);

    // Unpack input_vector
    logic [7:0] input_vector [0:INPUT_SIZE-1];
    generate
        genvar idx;
        for (idx = 0; idx < INPUT_SIZE; idx = idx + 1) begin
            assign input_vector[idx] = input_vector_packed[(INPUT_SIZE - idx)*8 - 1 -: 8];
        end
    endgenerate

    // Unpack weights
    logic signed [7:0] weights [0:OUTPUT_SIZE-1][0:INPUT_SIZE-1];
    generate
        genvar n, i;
        for (n = 0; n < OUTPUT_SIZE; n = n + 1) begin
            for (i = 0; i < INPUT_SIZE; i = i + 1) begin
                assign weights[n][i] = weights_packed[((n*INPUT_SIZE + i)+1)*8 -1 -: 8];
            end
        end
    endgenerate

    // Unpack biases
    logic signed [7:0] biases [0:OUTPUT_SIZE-1];
    generate
        for (n = 0; n < OUTPUT_SIZE; n = n + 1) begin
            assign biases[n] = biases_packed[(n+1)*8 -1 -: 8];
        end
    endgenerate

    // Internal Registers
    logic signed [15:0] accumulators [0:OUTPUT_SIZE-1];
    logic [$clog2(INPUT_SIZE):0] idx_i;
    logic [$clog2(OUTPUT_SIZE):0] idx_n;

    // State Machine States
    typedef enum logic [1:0] {
        IDLE,
        COMPUTE,
        DONE_STATE
    } state_t;

    state_t current_state, next_state;

    // Output Registers
    logic signed [15:0] fc_output [0:OUTPUT_SIZE-1];

    // Pack fc_output
    generate
        for (idx = 0; idx < OUTPUT_SIZE; idx = idx + 1) begin
            assign fc_output_packed[(OUTPUT_SIZE - idx)*16 -1 -: 16] = fc_output[idx];
        end
    endgenerate

    // State Transition and Computation Logic
    always_ff @(posedge clk or posedge reset) begin
        if (reset) begin
            current_state <= IDLE;
            done <= 1'b0;
            idx_i <= 0;
            for (idx_n = 0; idx_n < OUTPUT_SIZE; idx_n = idx_n + 1) begin
                accumulators[idx_n] <= 16'sd0;
                fc_output[idx_n] <= 16'sd0;
            end
        end else begin
            current_state <= next_state;
            case (current_state)
                IDLE: begin
                    done <= 1'b0;
                    if (start) begin
                        idx_i <= 0;
                        for (idx_n = 0; idx_n < OUTPUT_SIZE; idx_n = idx_n + 1) begin
                            accumulators[idx_n] <= 16'sd0;
                        end
                    end
                end
                COMPUTE: begin
                    if (idx_i < INPUT_SIZE) begin
                        for (idx_n = 0; idx_n < OUTPUT_SIZE; idx_n = idx_n + 1) begin
                            accumulators[idx_n] <= accumulators[idx_n] + ($signed(input_vector[idx_i]) * $signed(weights[idx_n][idx_i]));
                        end
                        idx_i <= idx_i + 1;
                    end else begin
                        for (idx_n = 0; idx_n < OUTPUT_SIZE; idx_n = idx_n + 1) begin
                            fc_output[idx_n] <= accumulators[idx_n] + $signed(biases[idx_n]);
                        end
                        done <= 1'b1;
                    end
                end
                DONE_STATE: begin
                    // Remain in DONE_STATE until reset
                end
                default: current_state <= IDLE;
            endcase
        end
    end

    // Next State Logic
    always_comb begin
        next_state = current_state;
        case (current_state)
            IDLE: begin
                if (start)
                    next_state = COMPUTE;
            end
            COMPUTE: begin
                if (idx_i >= INPUT_SIZE)
                    next_state = DONE_STATE;
            end
            DONE_STATE: begin
                // Stay in DONE_STATE until reset
            end
            default: next_state = IDLE;
        endcase
    end

endmodule
